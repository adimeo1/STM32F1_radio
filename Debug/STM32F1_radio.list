
STM32F1_radio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e6c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b54  08000f78  08000f78  00010f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001acc  08001acc  0002019c  2**0
                  CONTENTS
  4 .ARM          00000000  08001acc  08001acc  0002019c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001acc  08001acc  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001acc  08001acc  00011acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ad0  08001ad0  00011ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  08001ad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000019c  08001c70  0002019c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08001c70  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000066e5  00000000  00000000  000201c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001149  00000000  00000000  000268aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002b0  00000000  00000000  000279f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00012769  00000000  00000000  00027ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000420b  00000000  00000000  0003a411  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0005a369  00000000  00000000  0003e61c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00098985  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000200  00000000  00000000  00098a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00000784  00000000  00000000  00098c00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000019c 	.word	0x2000019c
 8000128:	00000000 	.word	0x00000000
 800012c:	08000f60 	.word	0x08000f60

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001a0 	.word	0x200001a0
 8000148:	08000f60 	.word	0x08000f60

0800014c <ssd1331_write_byte>:
   *						   0: Writes to the command register
   *						   1: Writes to the display data ram
   * @retval None
 **/
static void ssd1331_write_byte(uint8_t chData, uint8_t chCmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
	if (chCmd) {
 800015c:	79bb      	ldrb	r3, [r7, #6]
 800015e:	2b00      	cmp	r3, #0
 8000160:	d003      	beq.n	800016a <ssd1331_write_byte+0x1e>
		BB(GPIOA->ODR, PA1) = 1;
 8000162:	4b10      	ldr	r3, [pc, #64]	; (80001a4 <ssd1331_write_byte+0x58>)
 8000164:	2201      	movs	r2, #1
 8000166:	601a      	str	r2, [r3, #0]
 8000168:	e002      	b.n	8000170 <ssd1331_write_byte+0x24>
	} else {
		BB(GPIOA->ODR, PA1) = 0;
 800016a:	4b0e      	ldr	r3, [pc, #56]	; (80001a4 <ssd1331_write_byte+0x58>)
 800016c:	2200      	movs	r2, #0
 800016e:	601a      	str	r2, [r3, #0]
	}

	BB(GPIOA->ODR, PA0) = 0;
 8000170:	4b0d      	ldr	r3, [pc, #52]	; (80001a8 <ssd1331_write_byte+0x5c>)
 8000172:	2200      	movs	r2, #0
 8000174:	601a      	str	r2, [r3, #0]
	spi_rw(chData);
 8000176:	79fb      	ldrb	r3, [r7, #7]
 8000178:	b29b      	uxth	r3, r3
 800017a:	4618      	mov	r0, r3
 800017c:	f000 fe50 	bl	8000e20 <spi_rw>

	//BSY: Busy flag
	while(SPI1->SR & SPI_SR_BSY);
 8000180:	bf00      	nop
 8000182:	4b0a      	ldr	r3, [pc, #40]	; (80001ac <ssd1331_write_byte+0x60>)
 8000184:	689b      	ldr	r3, [r3, #8]
 8000186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800018a:	2b00      	cmp	r3, #0
 800018c:	d1f9      	bne.n	8000182 <ssd1331_write_byte+0x36>
	BB(GPIOA->ODR, PA0) = 1;
 800018e:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <ssd1331_write_byte+0x5c>)
 8000190:	2201      	movs	r2, #1
 8000192:	601a      	str	r2, [r3, #0]

	BB(GPIOA->ODR, PA1) = 1;
 8000194:	4b03      	ldr	r3, [pc, #12]	; (80001a4 <ssd1331_write_byte+0x58>)
 8000196:	2201      	movs	r2, #1
 8000198:	601a      	str	r2, [r3, #0]
}
 800019a:	bf00      	nop
 800019c:	3708      	adds	r7, #8
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	42210184 	.word	0x42210184
 80001a8:	42210180 	.word	0x42210180
 80001ac:	40013000 	.word	0x40013000

080001b0 <ssd1331_draw_point>:

void ssd1331_draw_point(uint8_t chXpos, uint8_t chYpos, uint16_t hwColor) 
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	71fb      	strb	r3, [r7, #7]
 80001ba:	460b      	mov	r3, r1
 80001bc:	71bb      	strb	r3, [r7, #6]
 80001be:	4613      	mov	r3, r2
 80001c0:	80bb      	strh	r3, [r7, #4]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	2b5f      	cmp	r3, #95	; 0x5f
 80001c6:	d82b      	bhi.n	8000220 <ssd1331_draw_point+0x70>
 80001c8:	79bb      	ldrb	r3, [r7, #6]
 80001ca:	2b3f      	cmp	r3, #63	; 0x3f
 80001cc:	d828      	bhi.n	8000220 <ssd1331_draw_point+0x70>
		return;
	}

    //set column point
    ssd1331_write_byte(SET_COLUMN_ADDRESS, SSD1331_CMD);
 80001ce:	2100      	movs	r1, #0
 80001d0:	2015      	movs	r0, #21
 80001d2:	f7ff ffbb 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(chXpos, SSD1331_CMD);
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	2100      	movs	r1, #0
 80001da:	4618      	mov	r0, r3
 80001dc:	f7ff ffb6 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(OLED_WIDTH - 1, SSD1331_CMD);
 80001e0:	2100      	movs	r1, #0
 80001e2:	205f      	movs	r0, #95	; 0x5f
 80001e4:	f7ff ffb2 	bl	800014c <ssd1331_write_byte>
    //set row point
    ssd1331_write_byte(SET_ROW_ADDRESS, SSD1331_CMD);
 80001e8:	2100      	movs	r1, #0
 80001ea:	2075      	movs	r0, #117	; 0x75
 80001ec:	f7ff ffae 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(chYpos, SSD1331_CMD);
 80001f0:	79bb      	ldrb	r3, [r7, #6]
 80001f2:	2100      	movs	r1, #0
 80001f4:	4618      	mov	r0, r3
 80001f6:	f7ff ffa9 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(OLED_HEIGHT - 1, SSD1331_CMD);
 80001fa:	2100      	movs	r1, #0
 80001fc:	203f      	movs	r0, #63	; 0x3f
 80001fe:	f7ff ffa5 	bl	800014c <ssd1331_write_byte>
    
    //fill 16bit colour
	ssd1331_write_byte(hwColor >> 8, SSD1331_DATA);
 8000202:	88bb      	ldrh	r3, [r7, #4]
 8000204:	0a1b      	lsrs	r3, r3, #8
 8000206:	b29b      	uxth	r3, r3
 8000208:	b2db      	uxtb	r3, r3
 800020a:	2101      	movs	r1, #1
 800020c:	4618      	mov	r0, r3
 800020e:	f7ff ff9d 	bl	800014c <ssd1331_write_byte>
	ssd1331_write_byte(hwColor, SSD1331_DATA);   
 8000212:	88bb      	ldrh	r3, [r7, #4]
 8000214:	b2db      	uxtb	r3, r3
 8000216:	2101      	movs	r1, #1
 8000218:	4618      	mov	r0, r3
 800021a:	f7ff ff97 	bl	800014c <ssd1331_write_byte>
 800021e:	e000      	b.n	8000222 <ssd1331_draw_point+0x72>
		return;
 8000220:	bf00      	nop
}
 8000222:	3708      	adds	r7, #8
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}

08000228 <ssd1331_display_char>:
  * @param  chSize: 
  * @param  chMode
  * @retval 
**/
void ssd1331_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr, uint8_t chSize, uint16_t hwColor)
{      	
 8000228:	b590      	push	{r4, r7, lr}
 800022a:	b085      	sub	sp, #20
 800022c:	af00      	add	r7, sp, #0
 800022e:	4604      	mov	r4, r0
 8000230:	4608      	mov	r0, r1
 8000232:	4611      	mov	r1, r2
 8000234:	461a      	mov	r2, r3
 8000236:	4623      	mov	r3, r4
 8000238:	71fb      	strb	r3, [r7, #7]
 800023a:	4603      	mov	r3, r0
 800023c:	71bb      	strb	r3, [r7, #6]
 800023e:	460b      	mov	r3, r1
 8000240:	717b      	strb	r3, [r7, #5]
 8000242:	4613      	mov	r3, r2
 8000244:	713b      	strb	r3, [r7, #4]
	uint8_t i, j, chTemp;
	uint8_t chYpos0 = chYpos;
 8000246:	79bb      	ldrb	r3, [r7, #6]
 8000248:	733b      	strb	r3, [r7, #12]

	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	2b5f      	cmp	r3, #95	; 0x5f
 800024e:	d850      	bhi.n	80002f2 <ssd1331_display_char+0xca>
 8000250:	79bb      	ldrb	r3, [r7, #6]
 8000252:	2b3f      	cmp	r3, #63	; 0x3f
 8000254:	d84d      	bhi.n	80002f2 <ssd1331_display_char+0xca>
		return;
	}
					   
    for (i = 0; i < chSize; i ++) {   
 8000256:	2300      	movs	r3, #0
 8000258:	73fb      	strb	r3, [r7, #15]
 800025a:	e045      	b.n	80002e8 <ssd1331_display_char+0xc0>
		if (FONT_1206 == chSize) {
 800025c:	793b      	ldrb	r3, [r7, #4]
 800025e:	2b0c      	cmp	r3, #12
 8000260:	d10d      	bne.n	800027e <ssd1331_display_char+0x56>
			chTemp = c_chFont1206[chChr - 0x20][i];  
 8000262:	797b      	ldrb	r3, [r7, #5]
 8000264:	f1a3 0220 	sub.w	r2, r3, #32
 8000268:	7bf9      	ldrb	r1, [r7, #15]
 800026a:	4824      	ldr	r0, [pc, #144]	; (80002fc <ssd1331_display_char+0xd4>)
 800026c:	4613      	mov	r3, r2
 800026e:	005b      	lsls	r3, r3, #1
 8000270:	4413      	add	r3, r2
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	4403      	add	r3, r0
 8000276:	440b      	add	r3, r1
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	737b      	strb	r3, [r7, #13]
 800027c:	e00c      	b.n	8000298 <ssd1331_display_char+0x70>
		} else if (FONT_1608 == chSize) { 
 800027e:	793b      	ldrb	r3, [r7, #4]
 8000280:	2b10      	cmp	r3, #16
 8000282:	d109      	bne.n	8000298 <ssd1331_display_char+0x70>
			chTemp = c_chFont1608[chChr - 0x20][i];
 8000284:	797b      	ldrb	r3, [r7, #5]
 8000286:	f1a3 0220 	sub.w	r2, r3, #32
 800028a:	7bfb      	ldrb	r3, [r7, #15]
 800028c:	491c      	ldr	r1, [pc, #112]	; (8000300 <ssd1331_display_char+0xd8>)
 800028e:	0112      	lsls	r2, r2, #4
 8000290:	440a      	add	r2, r1
 8000292:	4413      	add	r3, r2
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	737b      	strb	r3, [r7, #13]
		}
		
        for (j = 0; j < 8; j ++) {
 8000298:	2300      	movs	r3, #0
 800029a:	73bb      	strb	r3, [r7, #14]
 800029c:	e01e      	b.n	80002dc <ssd1331_display_char+0xb4>
    		if (chTemp & 0x80) {
 800029e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	da05      	bge.n	80002b2 <ssd1331_display_char+0x8a>
				ssd1331_draw_point (chXpos, chYpos, hwColor);
 80002a6:	8c3a      	ldrh	r2, [r7, #32]
 80002a8:	79b9      	ldrb	r1, [r7, #6]
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	4618      	mov	r0, r3
 80002ae:	f7ff ff7f 	bl	80001b0 <ssd1331_draw_point>
    		}			
			chTemp <<= 1;
 80002b2:	7b7b      	ldrb	r3, [r7, #13]
 80002b4:	005b      	lsls	r3, r3, #1
 80002b6:	737b      	strb	r3, [r7, #13]
			chYpos ++;
 80002b8:	79bb      	ldrb	r3, [r7, #6]
 80002ba:	3301      	adds	r3, #1
 80002bc:	71bb      	strb	r3, [r7, #6]
			if ((chYpos - chYpos0) == chSize) {
 80002be:	79ba      	ldrb	r2, [r7, #6]
 80002c0:	7b3b      	ldrb	r3, [r7, #12]
 80002c2:	1ad2      	subs	r2, r2, r3
 80002c4:	793b      	ldrb	r3, [r7, #4]
 80002c6:	429a      	cmp	r2, r3
 80002c8:	d105      	bne.n	80002d6 <ssd1331_display_char+0xae>
				chYpos = chYpos0;
 80002ca:	7b3b      	ldrb	r3, [r7, #12]
 80002cc:	71bb      	strb	r3, [r7, #6]
				chXpos ++;
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	3301      	adds	r3, #1
 80002d2:	71fb      	strb	r3, [r7, #7]
				break;
 80002d4:	e005      	b.n	80002e2 <ssd1331_display_char+0xba>
        for (j = 0; j < 8; j ++) {
 80002d6:	7bbb      	ldrb	r3, [r7, #14]
 80002d8:	3301      	adds	r3, #1
 80002da:	73bb      	strb	r3, [r7, #14]
 80002dc:	7bbb      	ldrb	r3, [r7, #14]
 80002de:	2b07      	cmp	r3, #7
 80002e0:	d9dd      	bls.n	800029e <ssd1331_display_char+0x76>
    for (i = 0; i < chSize; i ++) {   
 80002e2:	7bfb      	ldrb	r3, [r7, #15]
 80002e4:	3301      	adds	r3, #1
 80002e6:	73fb      	strb	r3, [r7, #15]
 80002e8:	7bfa      	ldrb	r2, [r7, #15]
 80002ea:	793b      	ldrb	r3, [r7, #4]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	d3b5      	bcc.n	800025c <ssd1331_display_char+0x34>
 80002f0:	e000      	b.n	80002f4 <ssd1331_display_char+0xcc>
		return;
 80002f2:	bf00      	nop
			}
		}  	 
    } 
}
 80002f4:	3714      	adds	r7, #20
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd90      	pop	{r4, r7, pc}
 80002fa:	bf00      	nop
 80002fc:	0800102c 	.word	0x0800102c
 8000300:	080014a0 	.word	0x080014a0

08000304 <ssd1331_display_string>:
  * @param  pchString: Pointer to a string to display on the screen 
  *         
  * @retval  None
**/
void ssd1331_display_string(uint8_t chXpos, uint8_t chYpos, const uint8_t *pchString, uint8_t chSize, uint16_t hwColor)
{
 8000304:	b590      	push	{r4, r7, lr}
 8000306:	b085      	sub	sp, #20
 8000308:	af02      	add	r7, sp, #8
 800030a:	603a      	str	r2, [r7, #0]
 800030c:	461a      	mov	r2, r3
 800030e:	4603      	mov	r3, r0
 8000310:	71fb      	strb	r3, [r7, #7]
 8000312:	460b      	mov	r3, r1
 8000314:	71bb      	strb	r3, [r7, #6]
 8000316:	4613      	mov	r3, r2
 8000318:	717b      	strb	r3, [r7, #5]

	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	2b5f      	cmp	r3, #95	; 0x5f
 800031e:	d836      	bhi.n	800038e <ssd1331_display_string+0x8a>
 8000320:	79bb      	ldrb	r3, [r7, #6]
 8000322:	2b3f      	cmp	r3, #63	; 0x3f
 8000324:	d833      	bhi.n	800038e <ssd1331_display_string+0x8a>
		return;
	}
	
    while (*pchString != '\0') {       
 8000326:	e02d      	b.n	8000384 <ssd1331_display_string+0x80>
        if (chXpos > (OLED_WIDTH - chSize / 2)) {
 8000328:	79fa      	ldrb	r2, [r7, #7]
 800032a:	797b      	ldrb	r3, [r7, #5]
 800032c:	085b      	lsrs	r3, r3, #1
 800032e:	b2db      	uxtb	r3, r3
 8000330:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 8000334:	429a      	cmp	r2, r3
 8000336:	dd12      	ble.n	800035e <ssd1331_display_string+0x5a>
			chXpos = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	71fb      	strb	r3, [r7, #7]
			chYpos += chSize;
 800033c:	79ba      	ldrb	r2, [r7, #6]
 800033e:	797b      	ldrb	r3, [r7, #5]
 8000340:	4413      	add	r3, r2
 8000342:	71bb      	strb	r3, [r7, #6]
			if (chYpos > (OLED_HEIGHT - chSize)) {
 8000344:	79ba      	ldrb	r2, [r7, #6]
 8000346:	797b      	ldrb	r3, [r7, #5]
 8000348:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800034c:	429a      	cmp	r2, r3
 800034e:	dd06      	ble.n	800035e <ssd1331_display_string+0x5a>
				chYpos = chXpos = 0;
 8000350:	2300      	movs	r3, #0
 8000352:	71fb      	strb	r3, [r7, #7]
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	71bb      	strb	r3, [r7, #6]
				ssd1331_clear_screen(0x00);
 8000358:	2000      	movs	r0, #0
 800035a:	f000 f81c 	bl	8000396 <ssd1331_clear_screen>
			}
		}
		
        ssd1331_display_char(chXpos, chYpos, *pchString, chSize, hwColor);
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	781a      	ldrb	r2, [r3, #0]
 8000362:	797c      	ldrb	r4, [r7, #5]
 8000364:	79b9      	ldrb	r1, [r7, #6]
 8000366:	79f8      	ldrb	r0, [r7, #7]
 8000368:	8b3b      	ldrh	r3, [r7, #24]
 800036a:	9300      	str	r3, [sp, #0]
 800036c:	4623      	mov	r3, r4
 800036e:	f7ff ff5b 	bl	8000228 <ssd1331_display_char>
        chXpos += chSize / 2;
 8000372:	797b      	ldrb	r3, [r7, #5]
 8000374:	085b      	lsrs	r3, r3, #1
 8000376:	b2da      	uxtb	r2, r3
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	4413      	add	r3, r2
 800037c:	71fb      	strb	r3, [r7, #7]
        pchString ++;
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	3301      	adds	r3, #1
 8000382:	603b      	str	r3, [r7, #0]
    while (*pchString != '\0') {       
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d1cd      	bne.n	8000328 <ssd1331_display_string+0x24>
 800038c:	e000      	b.n	8000390 <ssd1331_display_string+0x8c>
		return;
 800038e:	bf00      	nop
    } 
}
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	bd90      	pop	{r4, r7, pc}

08000396 <ssd1331_clear_screen>:
        }
    }
}

void ssd1331_clear_screen(uint16_t hwColor)  
{
 8000396:	b580      	push	{r7, lr}
 8000398:	b084      	sub	sp, #16
 800039a:	af00      	add	r7, sp, #0
 800039c:	4603      	mov	r3, r0
 800039e:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	
	for(i = 0; i < OLED_HEIGHT; i ++){
 80003a0:	2300      	movs	r3, #0
 80003a2:	81fb      	strh	r3, [r7, #14]
 80003a4:	e013      	b.n	80003ce <ssd1331_clear_screen+0x38>
		for(j = 0; j < OLED_WIDTH; j ++){
 80003a6:	2300      	movs	r3, #0
 80003a8:	81bb      	strh	r3, [r7, #12]
 80003aa:	e00a      	b.n	80003c2 <ssd1331_clear_screen+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 80003ac:	89bb      	ldrh	r3, [r7, #12]
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	89fa      	ldrh	r2, [r7, #14]
 80003b2:	b2d1      	uxtb	r1, r2
 80003b4:	88fa      	ldrh	r2, [r7, #6]
 80003b6:	4618      	mov	r0, r3
 80003b8:	f7ff fefa 	bl	80001b0 <ssd1331_draw_point>
		for(j = 0; j < OLED_WIDTH; j ++){
 80003bc:	89bb      	ldrh	r3, [r7, #12]
 80003be:	3301      	adds	r3, #1
 80003c0:	81bb      	strh	r3, [r7, #12]
 80003c2:	89bb      	ldrh	r3, [r7, #12]
 80003c4:	2b5f      	cmp	r3, #95	; 0x5f
 80003c6:	d9f1      	bls.n	80003ac <ssd1331_clear_screen+0x16>
	for(i = 0; i < OLED_HEIGHT; i ++){
 80003c8:	89fb      	ldrh	r3, [r7, #14]
 80003ca:	3301      	adds	r3, #1
 80003cc:	81fb      	strh	r3, [r7, #14]
 80003ce:	89fb      	ldrh	r3, [r7, #14]
 80003d0:	2b3f      	cmp	r3, #63	; 0x3f
 80003d2:	d9e8      	bls.n	80003a6 <ssd1331_clear_screen+0x10>
		}
	}
}
 80003d4:	bf00      	nop
 80003d6:	3710      	adds	r7, #16
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <ssd1331_init>:


void ssd1331_init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	BB(GPIOA->ODR, PA2) = 1;  //RES set
 80003e0:	4b54      	ldr	r3, [pc, #336]	; (8000534 <ssd1331_init+0x158>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	601a      	str	r2, [r3, #0]
		while(SPI1->SR & SPI_SR_BSY);
 80003e6:	bf00      	nop
 80003e8:	4b53      	ldr	r3, [pc, #332]	; (8000538 <ssd1331_init+0x15c>)
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d1f9      	bne.n	80003e8 <ssd1331_init+0xc>
			BB(GPIOA->ODR, PA0) = 1;
 80003f4:	4b51      	ldr	r3, [pc, #324]	; (800053c <ssd1331_init+0x160>)
 80003f6:	2201      	movs	r2, #1
 80003f8:	601a      	str	r2, [r3, #0]
	
	ssd1331_write_byte(DISPLAY_OFF, SSD1331_CMD);          //Display Off
 80003fa:	2100      	movs	r1, #0
 80003fc:	20ae      	movs	r0, #174	; 0xae
 80003fe:	f7ff fea5 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(SET_CONTRAST_A, SSD1331_CMD);       //Set contrast for color A
 8000402:	2100      	movs	r1, #0
 8000404:	2081      	movs	r0, #129	; 0x81
 8000406:	f7ff fea1 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(0xFF, SSD1331_CMD);                     //145 0x91
 800040a:	2100      	movs	r1, #0
 800040c:	20ff      	movs	r0, #255	; 0xff
 800040e:	f7ff fe9d 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(SET_CONTRAST_B, SSD1331_CMD);       //Set contrast for color B
 8000412:	2100      	movs	r1, #0
 8000414:	2082      	movs	r0, #130	; 0x82
 8000416:	f7ff fe99 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(0xFF, SSD1331_CMD);                     //80 0x50
 800041a:	2100      	movs	r1, #0
 800041c:	20ff      	movs	r0, #255	; 0xff
 800041e:	f7ff fe95 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(SET_CONTRAST_C, SSD1331_CMD);       //Set contrast for color C
 8000422:	2100      	movs	r1, #0
 8000424:	2083      	movs	r0, #131	; 0x83
 8000426:	f7ff fe91 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(0xFF, SSD1331_CMD);                     //125 0x7D
 800042a:	2100      	movs	r1, #0
 800042c:	20ff      	movs	r0, #255	; 0xff
 800042e:	f7ff fe8d 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(MASTER_CURRENT_CONTROL, SSD1331_CMD);//master current control
 8000432:	2100      	movs	r1, #0
 8000434:	2087      	movs	r0, #135	; 0x87
 8000436:	f7ff fe89 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(0x06, SSD1331_CMD);                     //6
 800043a:	2100      	movs	r1, #0
 800043c:	2006      	movs	r0, #6
 800043e:	f7ff fe85 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(SET_PRECHARGE_SPEED_A, SSD1331_CMD);//Set Second Pre-change Speed For ColorA
 8000442:	2100      	movs	r1, #0
 8000444:	208a      	movs	r0, #138	; 0x8a
 8000446:	f7ff fe81 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 800044a:	2100      	movs	r1, #0
 800044c:	2064      	movs	r0, #100	; 0x64
 800044e:	f7ff fe7d 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(SET_PRECHARGE_SPEED_B, SSD1331_CMD);//Set Second Pre-change Speed For ColorB
 8000452:	2100      	movs	r1, #0
 8000454:	208b      	movs	r0, #139	; 0x8b
 8000456:	f7ff fe79 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(0x78, SSD1331_CMD);                     //120
 800045a:	2100      	movs	r1, #0
 800045c:	2078      	movs	r0, #120	; 0x78
 800045e:	f7ff fe75 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(SET_PRECHARGE_SPEED_C, SSD1331_CMD);//Set Second Pre-change Speed For ColorC
 8000462:	2100      	movs	r1, #0
 8000464:	208c      	movs	r0, #140	; 0x8c
 8000466:	f7ff fe71 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 800046a:	2100      	movs	r1, #0
 800046c:	2064      	movs	r0, #100	; 0x64
 800046e:	f7ff fe6d 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(SET_REMAP, SSD1331_CMD);            //set remap & data format
 8000472:	2100      	movs	r1, #0
 8000474:	20a0      	movs	r0, #160	; 0xa0
 8000476:	f7ff fe69 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(0x72, SSD1331_CMD);                     //0x72              
 800047a:	2100      	movs	r1, #0
 800047c:	2072      	movs	r0, #114	; 0x72
 800047e:	f7ff fe65 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(SET_DISPLAY_START_LINE, SSD1331_CMD);//Set display Start Line
 8000482:	2100      	movs	r1, #0
 8000484:	20a1      	movs	r0, #161	; 0xa1
 8000486:	f7ff fe61 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(0x0, SSD1331_CMD);
 800048a:	2100      	movs	r1, #0
 800048c:	2000      	movs	r0, #0
 800048e:	f7ff fe5d 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(SET_DISPLAY_OFFSET, SSD1331_CMD);   //Set display offset
 8000492:	2100      	movs	r1, #0
 8000494:	20a2      	movs	r0, #162	; 0xa2
 8000496:	f7ff fe59 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(0x0, SSD1331_CMD);
 800049a:	2100      	movs	r1, #0
 800049c:	2000      	movs	r0, #0
 800049e:	f7ff fe55 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(NORMAL_DISPLAY, SSD1331_CMD);       //Set display mode
 80004a2:	2100      	movs	r1, #0
 80004a4:	20a4      	movs	r0, #164	; 0xa4
 80004a6:	f7ff fe51 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(SET_MULTIPLEX_RATIO, SSD1331_CMD);  //Set multiplex ratio
 80004aa:	2100      	movs	r1, #0
 80004ac:	20a8      	movs	r0, #168	; 0xa8
 80004ae:	f7ff fe4d 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(0x3F, SSD1331_CMD);
 80004b2:	2100      	movs	r1, #0
 80004b4:	203f      	movs	r0, #63	; 0x3f
 80004b6:	f7ff fe49 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(SET_MASTER_CONFIGURE, SSD1331_CMD); //Set master configuration
 80004ba:	2100      	movs	r1, #0
 80004bc:	20ad      	movs	r0, #173	; 0xad
 80004be:	f7ff fe45 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(0x8E, SSD1331_CMD);
 80004c2:	2100      	movs	r1, #0
 80004c4:	208e      	movs	r0, #142	; 0x8e
 80004c6:	f7ff fe41 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(POWER_SAVE_MODE, SSD1331_CMD);      //Set Power Save Mode
 80004ca:	2100      	movs	r1, #0
 80004cc:	20b0      	movs	r0, #176	; 0xb0
 80004ce:	f7ff fe3d 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(0x00, SSD1331_CMD);                     //0x00
 80004d2:	2100      	movs	r1, #0
 80004d4:	2000      	movs	r0, #0
 80004d6:	f7ff fe39 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(PHASE_PERIOD_ADJUSTMENT, SSD1331_CMD);//phase 1 and 2 period adjustment
 80004da:	2100      	movs	r1, #0
 80004dc:	20b1      	movs	r0, #177	; 0xb1
 80004de:	f7ff fe35 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(0x31, SSD1331_CMD);                     //0x31
 80004e2:	2100      	movs	r1, #0
 80004e4:	2031      	movs	r0, #49	; 0x31
 80004e6:	f7ff fe31 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(DISPLAY_CLOCK_DIV, SSD1331_CMD);    //display clock divider/oscillator frequency
 80004ea:	2100      	movs	r1, #0
 80004ec:	20b3      	movs	r0, #179	; 0xb3
 80004ee:	f7ff fe2d 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(0xF0, SSD1331_CMD);
 80004f2:	2100      	movs	r1, #0
 80004f4:	20f0      	movs	r0, #240	; 0xf0
 80004f6:	f7ff fe29 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(SET_PRECHARGE_VOLTAGE, SSD1331_CMD);//Set Pre-Change Level
 80004fa:	2100      	movs	r1, #0
 80004fc:	20bb      	movs	r0, #187	; 0xbb
 80004fe:	f7ff fe25 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(0x3A, SSD1331_CMD);
 8000502:	2100      	movs	r1, #0
 8000504:	203a      	movs	r0, #58	; 0x3a
 8000506:	f7ff fe21 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(SET_V_VOLTAGE, SSD1331_CMD);        //Set vcomH
 800050a:	2100      	movs	r1, #0
 800050c:	20be      	movs	r0, #190	; 0xbe
 800050e:	f7ff fe1d 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(0x3E, SSD1331_CMD);
 8000512:	2100      	movs	r1, #0
 8000514:	203e      	movs	r0, #62	; 0x3e
 8000516:	f7ff fe19 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(DEACTIVE_SCROLLING, SSD1331_CMD);   //disable scrolling
 800051a:	2100      	movs	r1, #0
 800051c:	202e      	movs	r0, #46	; 0x2e
 800051e:	f7ff fe15 	bl	800014c <ssd1331_write_byte>
    ssd1331_write_byte(NORMAL_BRIGHTNESS_DISPLAY_ON, SSD1331_CMD);//set display on
 8000522:	2100      	movs	r1, #0
 8000524:	20af      	movs	r0, #175	; 0xaf
 8000526:	f7ff fe11 	bl	800014c <ssd1331_write_byte>

    //ssd1331_fill_rect(0, 0, 96, 64, 0x0000);
    ssd1331_clear_screen(0x0000);
 800052a:	2000      	movs	r0, #0
 800052c:	f7ff ff33 	bl	8000396 <ssd1331_clear_screen>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	42210188 	.word	0x42210188
 8000538:	40013000 	.word	0x40013000
 800053c:	42210180 	.word	0x42210180

08000540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800054a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054e:	2b00      	cmp	r3, #0
 8000550:	db0b      	blt.n	800056a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	f003 021f 	and.w	r2, r3, #31
 8000558:	4906      	ldr	r1, [pc, #24]	; (8000574 <__NVIC_EnableIRQ+0x34>)
 800055a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055e:	095b      	lsrs	r3, r3, #5
 8000560:	2001      	movs	r0, #1
 8000562:	fa00 f202 	lsl.w	r2, r0, r2
 8000566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	e000e100 	.word	0xe000e100

08000578 <encoder_init>:
#include "encoder.h"
#include "i2c.h"
#include "SSD1331.h"

void encoder_init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	//APB2 peripheral clock enable register
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN | RCC_APB2ENR_IOPAEN | RCC_APB2ENR_TIM1EN | RCC_APB2ENR_AFIOEN;
 800057c:	4b3d      	ldr	r3, [pc, #244]	; (8000674 <encoder_init+0xfc>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a3c      	ldr	r2, [pc, #240]	; (8000674 <encoder_init+0xfc>)
 8000582:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000586:	f043 030d 	orr.w	r3, r3, #13
 800058a:	6193      	str	r3, [r2, #24]
	gpio_pin_cfg(GPIOA, PA8, gpio_mode_input_pull);
 800058c:	2208      	movs	r2, #8
 800058e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000592:	4839      	ldr	r0, [pc, #228]	; (8000678 <encoder_init+0x100>)
 8000594:	f000 f8d0 	bl	8000738 <gpio_pin_cfg>
	gpio_pin_cfg(GPIOA, PA9, gpio_mode_input_pull);
 8000598:	2208      	movs	r2, #8
 800059a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800059e:	4836      	ldr	r0, [pc, #216]	; (8000678 <encoder_init+0x100>)
 80005a0:	f000 f8ca 	bl	8000738 <gpio_pin_cfg>
	BB(GPIOA->ODR, PA8) = 1;
 80005a4:	4b35      	ldr	r3, [pc, #212]	; (800067c <encoder_init+0x104>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	601a      	str	r2, [r3, #0]
	BB(GPIOA->ODR, PA9) = 1;
 80005aa:	4b35      	ldr	r3, [pc, #212]	; (8000680 <encoder_init+0x108>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	601a      	str	r2, [r3, #0]

	//slave mode control register Encoder mode 1, 2, 3
	TIM1->SMCR |= TIM_SMCR_SMS_0;
 80005b0:	4b34      	ldr	r3, [pc, #208]	; (8000684 <encoder_init+0x10c>)
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	4a33      	ldr	r2, [pc, #204]	; (8000684 <encoder_init+0x10c>)
 80005b6:	f043 0301 	orr.w	r3, r3, #1
 80005ba:	6093      	str	r3, [r2, #8]

	//Input capture 1,2  filter
	TIM1->CCMR1 |= TIM_CCMR1_IC1F | TIM_CCMR1_IC2F;
 80005bc:	4b31      	ldr	r3, [pc, #196]	; (8000684 <encoder_init+0x10c>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	4a30      	ldr	r2, [pc, #192]	; (8000684 <encoder_init+0x10c>)
 80005c2:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80005c6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80005ca:	6193      	str	r3, [r2, #24]

	//auto-reload register
	TIM1->ARR = 10;
 80005cc:	4b2d      	ldr	r3, [pc, #180]	; (8000684 <encoder_init+0x10c>)
 80005ce:	220a      	movs	r2, #10
 80005d0:	62da      	str	r2, [r3, #44]	; 0x2c

	//DMA/interrupt enable register
	//TIM1->DIER |= TIM_DIER_UIE;

	//TIM1 and TIM8 control register 1 enable counter
	TIM1->CR1 |= TIM_CR1_CEN;
 80005d2:	4b2c      	ldr	r3, [pc, #176]	; (8000684 <encoder_init+0x10c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a2b      	ldr	r2, [pc, #172]	; (8000684 <encoder_init+0x10c>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6013      	str	r3, [r2, #0]

///////////////////////////////////////////interrupt from encoder pin PA8///////////////////////
	//External interrupt configuration register 3 - PA8
	AFIO->EXTICR[2] |= AFIO_EXTICR3_EXTI8_PA;
 80005de:	4b2a      	ldr	r3, [pc, #168]	; (8000688 <encoder_init+0x110>)
 80005e0:	4a29      	ldr	r2, [pc, #164]	; (8000688 <encoder_init+0x110>)
 80005e2:	691b      	ldr	r3, [r3, #16]
 80005e4:	6113      	str	r3, [r2, #16]

	//Interrupt mask register Interrupt Mask on line x
	EXTI->IMR |= EXTI_IMR_MR8;
 80005e6:	4b29      	ldr	r3, [pc, #164]	; (800068c <encoder_init+0x114>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a28      	ldr	r2, [pc, #160]	; (800068c <encoder_init+0x114>)
 80005ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005f0:	6013      	str	r3, [r2, #0]

	//Falling trigger selection register
	EXTI->FTSR |= EXTI_FTSR_TR8;
 80005f2:	4b26      	ldr	r3, [pc, #152]	; (800068c <encoder_init+0x114>)
 80005f4:	68db      	ldr	r3, [r3, #12]
 80005f6:	4a25      	ldr	r2, [pc, #148]	; (800068c <encoder_init+0x114>)
 80005f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005fc:	60d3      	str	r3, [r2, #12]
	//Rising trigger selection register
	//EXTI->RTSR |= EXTI_RTSR_TR8;

	//functions enabling and disabling a specific interrupt in the NVIC controller
	//in the controller only interrupts from the microcontroller peripherals are activated
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005fe:	2017      	movs	r0, #23
 8000600:	f7ff ff9e 	bl	8000540 <__NVIC_EnableIRQ>


	////////////////////////////////////////////button PB12//

	gpio_pin_cfg(GPIOB, PB12, gpio_mode_input_floating);
 8000604:	2204      	movs	r2, #4
 8000606:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800060a:	4821      	ldr	r0, [pc, #132]	; (8000690 <encoder_init+0x118>)
 800060c:	f000 f894 	bl	8000738 <gpio_pin_cfg>

	AFIO->EXTICR[3] |= AFIO_EXTICR4_EXTI12_PB;
 8000610:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <encoder_init+0x110>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	4a1c      	ldr	r2, [pc, #112]	; (8000688 <encoder_init+0x110>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6153      	str	r3, [r2, #20]

	EXTI->IMR |= EXTI_IMR_MR12;
 800061c:	4b1b      	ldr	r3, [pc, #108]	; (800068c <encoder_init+0x114>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a1a      	ldr	r2, [pc, #104]	; (800068c <encoder_init+0x114>)
 8000622:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000626:	6013      	str	r3, [r2, #0]
	EXTI->FTSR |= EXTI_FTSR_TR12;
 8000628:	4b18      	ldr	r3, [pc, #96]	; (800068c <encoder_init+0x114>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	4a17      	ldr	r2, [pc, #92]	; (800068c <encoder_init+0x114>)
 800062e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000632:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000634:	2028      	movs	r0, #40	; 0x28
 8000636:	f7ff ff83 	bl	8000540 <__NVIC_EnableIRQ>

	////////////////////////////////////////////button PB13//

	gpio_pin_cfg(GPIOB, PB13, gpio_mode_input_floating);
 800063a:	2204      	movs	r2, #4
 800063c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000640:	4813      	ldr	r0, [pc, #76]	; (8000690 <encoder_init+0x118>)
 8000642:	f000 f879 	bl	8000738 <gpio_pin_cfg>

	AFIO->EXTICR[3] |= AFIO_EXTICR4_EXTI13_PB;
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <encoder_init+0x110>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	4a0f      	ldr	r2, [pc, #60]	; (8000688 <encoder_init+0x110>)
 800064c:	f043 0310 	orr.w	r3, r3, #16
 8000650:	6153      	str	r3, [r2, #20]

	EXTI->IMR |= EXTI_IMR_MR13;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <encoder_init+0x114>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a0d      	ldr	r2, [pc, #52]	; (800068c <encoder_init+0x114>)
 8000658:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800065c:	6013      	str	r3, [r2, #0]
	EXTI->FTSR |= EXTI_FTSR_TR13;
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <encoder_init+0x114>)
 8000660:	68db      	ldr	r3, [r3, #12]
 8000662:	4a0a      	ldr	r2, [pc, #40]	; (800068c <encoder_init+0x114>)
 8000664:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000668:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(EXTI15_10_IRQn);
 800066a:	2028      	movs	r0, #40	; 0x28
 800066c:	f7ff ff68 	bl	8000540 <__NVIC_EnableIRQ>

}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40021000 	.word	0x40021000
 8000678:	40010800 	.word	0x40010800
 800067c:	422101a0 	.word	0x422101a0
 8000680:	422101a4 	.word	0x422101a4
 8000684:	40012c00 	.word	0x40012c00
 8000688:	40010000 	.word	0x40010000
 800068c:	40010400 	.word	0x40010400
 8000690:	40010c00 	.word	0x40010c00

08000694 <EXTI9_5_IRQHandler>:
Port input data register (GPIOx_IDR) (x=A..G)
Bits 15:0 IDRy: Port input data (y= 0 .. 15)
These bits are read only and can be accessed in Word mode only. They contain the input
value of the corresponding I/O port.
 */
__attribute__((interrupt)) void EXTI9_5_IRQHandler(void) {
 8000694:	4668      	mov	r0, sp
 8000696:	f020 0107 	bic.w	r1, r0, #7
 800069a:	468d      	mov	sp, r1
 800069c:	b589      	push	{r0, r3, r7, lr}
 800069e:	af00      	add	r7, sp, #0
if ( EXTI->PR & EXTI_PR_PR8) {
 80006a0:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <EXTI9_5_IRQHandler+0x48>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d010      	beq.n	80006ce <EXTI9_5_IRQHandler+0x3a>
EXTI->PR |= EXTI_PR_PR8;
 80006ac:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <EXTI9_5_IRQHandler+0x48>)
 80006ae:	695b      	ldr	r3, [r3, #20]
 80006b0:	4a0a      	ldr	r2, [pc, #40]	; (80006dc <EXTI9_5_IRQHandler+0x48>)
 80006b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b6:	6153      	str	r3, [r2, #20]

if ( GPIOA->IDR & PA9 ){
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <EXTI9_5_IRQHandler+0x4c>)
 80006ba:	689b      	ldr	r3, [r3, #8]
 80006bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d002      	beq.n	80006ca <EXTI9_5_IRQHandler+0x36>
menu_next();
 80006c4:	f000 f9ce 	bl	8000a64 <menu_next>
}
else {
	menu_prev();
}
}
}
 80006c8:	e001      	b.n	80006ce <EXTI9_5_IRQHandler+0x3a>
	menu_prev();
 80006ca:	f000 fa0d 	bl	8000ae8 <menu_prev>
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
 80006d6:	4685      	mov	sp, r0
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40010400 	.word	0x40010400
 80006e0:	40010800 	.word	0x40010800

080006e4 <EXTI15_10_IRQHandler>:


__attribute__((interrupt)) void EXTI15_10_IRQHandler(void) {
 80006e4:	4668      	mov	r0, sp
 80006e6:	f020 0107 	bic.w	r1, r0, #7
 80006ea:	468d      	mov	sp, r1
 80006ec:	b589      	push	{r0, r3, r7, lr}
 80006ee:	af00      	add	r7, sp, #0
if ( EXTI->PR & EXTI_PR_PR12) {
 80006f0:	4b10      	ldr	r3, [pc, #64]	; (8000734 <EXTI15_10_IRQHandler+0x50>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d007      	beq.n	800070c <EXTI15_10_IRQHandler+0x28>
EXTI->PR |= EXTI_PR_PR12;
 80006fc:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <EXTI15_10_IRQHandler+0x50>)
 80006fe:	695b      	ldr	r3, [r3, #20]
 8000700:	4a0c      	ldr	r2, [pc, #48]	; (8000734 <EXTI15_10_IRQHandler+0x50>)
 8000702:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000706:	6153      	str	r3, [r2, #20]

menu_enter();
 8000708:	f000 fa2a 	bl	8000b60 <menu_enter>
}

if ( EXTI->PR & EXTI_PR_PR13) {
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <EXTI15_10_IRQHandler+0x50>)
 800070e:	695b      	ldr	r3, [r3, #20]
 8000710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000714:	2b00      	cmp	r3, #0
 8000716:	d007      	beq.n	8000728 <EXTI15_10_IRQHandler+0x44>
EXTI->PR |= EXTI_PR_PR13;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <EXTI15_10_IRQHandler+0x50>)
 800071a:	695b      	ldr	r3, [r3, #20]
 800071c:	4a05      	ldr	r2, [pc, #20]	; (8000734 <EXTI15_10_IRQHandler+0x50>)
 800071e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000722:	6153      	str	r3, [r2, #20]

menu_back();
 8000724:	f000 fa5a 	bl	8000bdc <menu_back>

}
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
 8000730:	4685      	mov	sp, r0
 8000732:	4770      	bx	lr
 8000734:	40010400 	.word	0x40010400

08000738 <gpio_pin_cfg>:
#include "platform_specific.h"

#include "gpio_f1.h"

void gpio_pin_cfg(GPIO_TypeDef * const port, GpioPin_t pin, GpioMode_t mode)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	460b      	mov	r3, r1
 8000742:	807b      	strh	r3, [r7, #2]
 8000744:	4613      	mov	r3, r2
 8000746:	707b      	strb	r3, [r7, #1]

pin = __builtin_ctz(pin)*4;
 8000748:	887b      	ldrh	r3, [r7, #2]
 800074a:	fa93 f3a3 	rbit	r3, r3
 800074e:	fab3 f383 	clz	r3, r3
 8000752:	b29b      	uxth	r3, r3
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	807b      	strh	r3, [r7, #2]
uint32_t volatile * cr_reg;
uint32_t cr_val;
cr_reg = &port->CRL;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	60fb      	str	r3, [r7, #12]
if (pin > 28){
 800075c:	887b      	ldrh	r3, [r7, #2]
 800075e:	2b1c      	cmp	r3, #28
 8000760:	d905      	bls.n	800076e <gpio_pin_cfg+0x36>
pin -= 32;
 8000762:	887b      	ldrh	r3, [r7, #2]
 8000764:	3b20      	subs	r3, #32
 8000766:	807b      	strh	r3, [r7, #2]
cr_reg = &port->CRH;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3304      	adds	r3, #4
 800076c:	60fb      	str	r3, [r7, #12]
}
cr_val = *cr_reg;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	60bb      	str	r3, [r7, #8]
cr_val &= ~((uint32_t)(0x0f << pin));
 8000774:	887b      	ldrh	r3, [r7, #2]
 8000776:	220f      	movs	r2, #15
 8000778:	fa02 f303 	lsl.w	r3, r2, r3
 800077c:	43db      	mvns	r3, r3
 800077e:	68ba      	ldr	r2, [r7, #8]
 8000780:	4013      	ands	r3, r2
 8000782:	60bb      	str	r3, [r7, #8]
cr_val |= (uint32_t)(mode << pin);
 8000784:	787a      	ldrb	r2, [r7, #1]
 8000786:	887b      	ldrh	r3, [r7, #2]
 8000788:	fa02 f303 	lsl.w	r3, r2, r3
 800078c:	461a      	mov	r2, r3
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	4313      	orrs	r3, r2
 8000792:	60bb      	str	r3, [r7, #8]
*cr_reg = cr_val;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	68ba      	ldr	r2, [r7, #8]
 8000798:	601a      	str	r2, [r3, #0]
}
 800079a:	bf00      	nop
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr

080007a4 <i2c_init>:
  APB1 prescaler = 1 --> 8MHz

 */

void i2c_init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 80007a8:	4b17      	ldr	r3, [pc, #92]	; (8000808 <i2c_init+0x64>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a16      	ldr	r2, [pc, #88]	; (8000808 <i2c_init+0x64>)
 80007ae:	f043 0308 	orr.w	r3, r3, #8
 80007b2:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <i2c_init+0x64>)
 80007b6:	69db      	ldr	r3, [r3, #28]
 80007b8:	4a13      	ldr	r2, [pc, #76]	; (8000808 <i2c_init+0x64>)
 80007ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007be:	61d3      	str	r3, [r2, #28]

	gpio_pin_cfg(GPIOB, PB6, gpio_mode_alternate_OD_10MHz); /* GPIO -> SCL*/
 80007c0:	220d      	movs	r2, #13
 80007c2:	2140      	movs	r1, #64	; 0x40
 80007c4:	4811      	ldr	r0, [pc, #68]	; (800080c <i2c_init+0x68>)
 80007c6:	f7ff ffb7 	bl	8000738 <gpio_pin_cfg>
	gpio_pin_cfg(GPIOB, PB7, gpio_mode_alternate_OD_10MHz); /* GPIO -> SDA*/
 80007ca:	220d      	movs	r2, #13
 80007cc:	2180      	movs	r1, #128	; 0x80
 80007ce:	480f      	ldr	r0, [pc, #60]	; (800080c <i2c_init+0x68>)
 80007d0:	f7ff ffb2 	bl	8000738 <gpio_pin_cfg>

	//tell I2c register APB1 clock frequency
	I2C1->CR2 &= ~(I2C_CR2_FREQ);
 80007d4:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <i2c_init+0x6c>)
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	4a0d      	ldr	r2, [pc, #52]	; (8000810 <i2c_init+0x6c>)
 80007da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80007de:	6053      	str	r3, [r2, #4]
	I2C1->CR2 |= (8UL << 0);
 80007e0:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <i2c_init+0x6c>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <i2c_init+0x6c>)
 80007e6:	f043 0308 	orr.w	r3, r3, #8
 80007ea:	6053      	str	r3, [r2, #4]
	//RISE TIME
	I2C1->TRISE = 8+1;
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <i2c_init+0x6c>)
 80007ee:	2209      	movs	r2, #9
 80007f0:	621a      	str	r2, [r3, #32]
	//I2C speed (100kHz)
	I2C1->CCR = 40;	//-> 100kHz SCL
 80007f2:	4b07      	ldr	r3, [pc, #28]	; (8000810 <i2c_init+0x6c>)
 80007f4:	2228      	movs	r2, #40	; 0x28
 80007f6:	61da      	str	r2, [r3, #28]
	//Enable I2C
	I2C1->CR1 |= I2C_CR1_PE;
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <i2c_init+0x6c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a04      	ldr	r2, [pc, #16]	; (8000810 <i2c_init+0x6c>)
 80007fe:	f043 0301 	orr.w	r3, r3, #1
 8000802:	6013      	str	r3, [r2, #0]

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40021000 	.word	0x40021000
 800080c:	40010c00 	.word	0x40010c00
 8000810:	40005400 	.word	0x40005400

08000814 <i2c_transfer>:

void	i2c_transfer(uint8_t addrs, uint8_t *pData, uint8_t len)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	6039      	str	r1, [r7, #0]
 800081e:	71fb      	strb	r3, [r7, #7]
 8000820:	4613      	mov	r3, r2
 8000822:	71bb      	strb	r3, [r7, #6]
	0: ACK bit controls the (N)ACK of the current byte being received in the shift register. The
	PEC bit indicates that current byte in shift register is a PEC.
	1: ACK bit controls the (N)ACK of the next byte which will be received in the shift register.
	The PEC bit indicates that the next byte in the shift register is a PEC
	 */
	I2C1->CR1 &= ~(I2C_CR1_POS);
 8000824:	4b2a      	ldr	r3, [pc, #168]	; (80008d0 <i2c_transfer+0xbc>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a29      	ldr	r2, [pc, #164]	; (80008d0 <i2c_transfer+0xbc>)
 800082a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800082e:	6013      	str	r3, [r2, #0]

	//START: Start generation
	I2C1->CR1 |= (I2C_CR1_START);
 8000830:	4b27      	ldr	r3, [pc, #156]	; (80008d0 <i2c_transfer+0xbc>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a26      	ldr	r2, [pc, #152]	; (80008d0 <i2c_transfer+0xbc>)
 8000836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800083a:	6013      	str	r3, [r2, #0]
	/*
	SB: Start bit (Master mode)
	0: No Start condition
	1: Start condition generated.
	 */
	while(!(I2C1->SR1 & I2C_SR1_SB));
 800083c:	bf00      	nop
 800083e:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <i2c_transfer+0xbc>)
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	2b00      	cmp	r3, #0
 8000848:	d0f9      	beq.n	800083e <i2c_transfer+0x2a>

	//send slave address
	I2C1->DR = addrs;
 800084a:	4a21      	ldr	r2, [pc, #132]	; (80008d0 <i2c_transfer+0xbc>)
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	6113      	str	r3, [r2, #16]

	//wait for ack
	while(!(I2C1->SR1 & I2C_SR1_ADDR));
 8000850:	bf00      	nop
 8000852:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <i2c_transfer+0xbc>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	2b00      	cmp	r3, #0
 800085c:	d0f9      	beq.n	8000852 <i2c_transfer+0x3e>


	//clear adress flag
	__IO uint32_t tempRd = I2C1->SR1;
 800085e:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <i2c_transfer+0xbc>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	60bb      	str	r3, [r7, #8]
	tempRd = I2C1->SR2;
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <i2c_transfer+0xbc>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	60bb      	str	r3, [r7, #8]
	(void)tempRd;
 800086a:	68bb      	ldr	r3, [r7, #8]

	//send data
	uint8_t dataIdx = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	73fb      	strb	r3, [r7, #15]
	int8_t dataSize = len;
 8000870:	79bb      	ldrb	r3, [r7, #6]
 8000872:	73bb      	strb	r3, [r7, #14]
	while (dataSize>0)
 8000874:	e01c      	b.n	80008b0 <i2c_transfer+0x9c>
	{
		//check for Tx buffer empty --> send bytee TxE: Data register empty (transmitters)
		while(!(I2C1->SR1 & I2C_SR1_TXE));
 8000876:	bf00      	nop
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <i2c_transfer+0xbc>)
 800087a:	695b      	ldr	r3, [r3, #20]
 800087c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000880:	2b00      	cmp	r3, #0
 8000882:	d0f9      	beq.n	8000878 <i2c_transfer+0x64>
		I2C1->DR = pData [dataIdx];
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	683a      	ldr	r2, [r7, #0]
 8000888:	4413      	add	r3, r2
 800088a:	781a      	ldrb	r2, [r3, #0]
 800088c:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <i2c_transfer+0xbc>)
 800088e:	611a      	str	r2, [r3, #16]
		dataIdx++;
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	3301      	adds	r3, #1
 8000894:	73fb      	strb	r3, [r7, #15]
		dataSize--;
 8000896:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	3b01      	subs	r3, #1
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	73bb      	strb	r3, [r7, #14]
		//Wait for BTE flag BTF: Byte transfer finished
		while(!(I2C1->SR1 & I2C_SR1_BTF));
 80008a2:	bf00      	nop
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <i2c_transfer+0xbc>)
 80008a6:	695b      	ldr	r3, [r3, #20]
 80008a8:	f003 0304 	and.w	r3, r3, #4
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d0f9      	beq.n	80008a4 <i2c_transfer+0x90>
	while (dataSize>0)
 80008b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	dcde      	bgt.n	8000876 <i2c_transfer+0x62>

	}
	//generate stop condition
	I2C1->CR1 |= (I2C_CR1_STOP);
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <i2c_transfer+0xbc>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <i2c_transfer+0xbc>)
 80008be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008c2:	6013      	str	r3, [r2, #0]
}
 80008c4:	bf00      	nop
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40005400 	.word	0x40005400

080008d4 <main>:





int main(void) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0

 	spi_init();
 80008d8:	f000 fa6c 	bl	8000db4 <spi_init>
	ssd1331_init();
 80008dc:	f7ff fd7e 	bl	80003dc <ssd1331_init>
	ssd1331_clear_screen(BLACK);
 80008e0:	2000      	movs	r0, #0
 80008e2:	f7ff fd58 	bl	8000396 <ssd1331_clear_screen>
	i2c_init();
 80008e6:	f7ff ff5d 	bl	80007a4 <i2c_init>
	encoder_init();
 80008ea:	f7ff fe45 	bl	8000578 <encoder_init>


while(1){
 80008ee:	e7fe      	b.n	80008ee <main+0x1a>

080008f0 <menu_refresh>:

	uint8_t menu_index;
	uint8_t lcd_row_pos;
	uint8_t lcd_row_pos_level_1, lcd_row_pos_level_2;

	void menu_refresh(void) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af02      	add	r7, sp, #8

		menu_t *temp;
		uint8_t i;

		if (currentPointer->parent) temp = (currentPointer->parent)->child;
 80008f6:	4b34      	ldr	r3, [pc, #208]	; (80009c8 <menu_refresh+0xd8>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	691b      	ldr	r3, [r3, #16]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d005      	beq.n	800090c <menu_refresh+0x1c>
 8000900:	4b31      	ldr	r3, [pc, #196]	; (80009c8 <menu_refresh+0xd8>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	691b      	ldr	r3, [r3, #16]
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	e001      	b.n	8000910 <menu_refresh+0x20>
		else temp = &menu1;
 800090c:	4b2f      	ldr	r3, [pc, #188]	; (80009cc <menu_refresh+0xdc>)
 800090e:	607b      	str	r3, [r7, #4]

		for (i = 0; i != menu_index - lcd_row_pos; i++) {
 8000910:	2300      	movs	r3, #0
 8000912:	70fb      	strb	r3, [r7, #3]
 8000914:	e005      	b.n	8000922 <menu_refresh+0x32>
			temp = temp->next;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	607b      	str	r3, [r7, #4]
		for (i = 0; i != menu_index - lcd_row_pos; i++) {
 800091c:	78fb      	ldrb	r3, [r7, #3]
 800091e:	3301      	adds	r3, #1
 8000920:	70fb      	strb	r3, [r7, #3]
 8000922:	78fa      	ldrb	r2, [r7, #3]
 8000924:	4b2a      	ldr	r3, [pc, #168]	; (80009d0 <menu_refresh+0xe0>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4619      	mov	r1, r3
 800092a:	4b2a      	ldr	r3, [pc, #168]	; (80009d4 <menu_refresh+0xe4>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	1acb      	subs	r3, r1, r3
 8000930:	429a      	cmp	r2, r3
 8000932:	d1f0      	bne.n	8000916 <menu_refresh+0x26>
		}


		ssd1331_clear_screen(BLACK);
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff fd2e 	bl	8000396 <ssd1331_clear_screen>

		for (i = 0; i < LCD_ROWS; i++) {
 800093a:	2300      	movs	r3, #0
 800093c:	70fb      	strb	r3, [r7, #3]
 800093e:	e039      	b.n	80009b4 <menu_refresh+0xc4>


			if (temp == currentPointer) ssd1331_display_string(0, i*10,  "->", FONT_1206, RED);
 8000940:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <menu_refresh+0xd8>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	429a      	cmp	r2, r3
 8000948:	d10e      	bne.n	8000968 <menu_refresh+0x78>
 800094a:	78fb      	ldrb	r3, [r7, #3]
 800094c:	461a      	mov	r2, r3
 800094e:	0092      	lsls	r2, r2, #2
 8000950:	4413      	add	r3, r2
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	b2d9      	uxtb	r1, r3
 8000956:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	230c      	movs	r3, #12
 800095e:	4a1e      	ldr	r2, [pc, #120]	; (80009d8 <menu_refresh+0xe8>)
 8000960:	2000      	movs	r0, #0
 8000962:	f7ff fccf 	bl	8000304 <ssd1331_display_string>
 8000966:	e00d      	b.n	8000984 <menu_refresh+0x94>
			else ssd1331_display_string(0, i*10,  "  ", FONT_1206, RED);
 8000968:	78fb      	ldrb	r3, [r7, #3]
 800096a:	461a      	mov	r2, r3
 800096c:	0092      	lsls	r2, r2, #2
 800096e:	4413      	add	r3, r2
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	b2d9      	uxtb	r1, r3
 8000974:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	230c      	movs	r3, #12
 800097c:	4a17      	ldr	r2, [pc, #92]	; (80009dc <menu_refresh+0xec>)
 800097e:	2000      	movs	r0, #0
 8000980:	f7ff fcc0 	bl	8000304 <ssd1331_display_string>


			ssd1331_display_string(15, i*10,  temp->name, FONT_1206, GREEN);
 8000984:	78fb      	ldrb	r3, [r7, #3]
 8000986:	461a      	mov	r2, r3
 8000988:	0092      	lsls	r2, r2, #2
 800098a:	4413      	add	r3, r2
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	b2d9      	uxtb	r1, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	230c      	movs	r3, #12
 800099c:	200f      	movs	r0, #15
 800099e:	f7ff fcb1 	bl	8000304 <ssd1331_display_string>

			temp = temp->next;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	607b      	str	r3, [r7, #4]
			if (!temp) break;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d006      	beq.n	80009bc <menu_refresh+0xcc>
		for (i = 0; i < LCD_ROWS; i++) {
 80009ae:	78fb      	ldrb	r3, [r7, #3]
 80009b0:	3301      	adds	r3, #1
 80009b2:	70fb      	strb	r3, [r7, #3]
 80009b4:	78fb      	ldrb	r3, [r7, #3]
 80009b6:	2b05      	cmp	r3, #5
 80009b8:	d9c2      	bls.n	8000940 <menu_refresh+0x50>

		}

		// lcd_refresh();
	}
 80009ba:	e000      	b.n	80009be <menu_refresh+0xce>
			if (!temp) break;
 80009bc:	bf00      	nop
	}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000198 	.word	0x20000198
 80009cc:	20000000 	.word	0x20000000
 80009d0:	200001ba 	.word	0x200001ba
 80009d4:	200001bb 	.word	0x200001bb
 80009d8:	08001024 	.word	0x08001024
 80009dc:	08001028 	.word	0x08001028

080009e0 <menu_get_index>:

	uint8_t menu_get_index(menu_t *q) {
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]

		menu_t *temp;
		uint8_t i = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	72fb      	strb	r3, [r7, #11]

		if (q->parent) temp = (q->parent)->child;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	691b      	ldr	r3, [r3, #16]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d004      	beq.n	80009fe <menu_get_index+0x1e>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	691b      	ldr	r3, [r3, #16]
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	e008      	b.n	8000a10 <menu_get_index+0x30>
		else temp = &menu1;
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <menu_get_index+0x44>)
 8000a00:	60fb      	str	r3, [r7, #12]

		while (temp != q) {
 8000a02:	e005      	b.n	8000a10 <menu_get_index+0x30>
			temp = temp->next;
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	60fb      	str	r3, [r7, #12]
			i++;
 8000a0a:	7afb      	ldrb	r3, [r7, #11]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	72fb      	strb	r3, [r7, #11]
		while (temp != q) {
 8000a10:	68fa      	ldr	r2, [r7, #12]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d1f5      	bne.n	8000a04 <menu_get_index+0x24>
		}

		return i;
 8000a18:	7afb      	ldrb	r3, [r7, #11]
	}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	20000000 	.word	0x20000000

08000a28 <menu_get_level>:

	uint8_t menu_get_level(menu_t *q) {
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

		menu_t *temp = q;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	60fb      	str	r3, [r7, #12]
		uint8_t i = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	72fb      	strb	r3, [r7, #11]

		if (!q->parent) return 0;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	691b      	ldr	r3, [r3, #16]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d107      	bne.n	8000a50 <menu_get_level+0x28>
 8000a40:	2300      	movs	r3, #0
 8000a42:	e00a      	b.n	8000a5a <menu_get_level+0x32>

		while (temp->parent != NULL) {
			temp = temp->parent;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	691b      	ldr	r3, [r3, #16]
 8000a48:	60fb      	str	r3, [r7, #12]
			i++;
 8000a4a:	7afb      	ldrb	r3, [r7, #11]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	72fb      	strb	r3, [r7, #11]
		while (temp->parent != NULL) {
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	691b      	ldr	r3, [r3, #16]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d1f5      	bne.n	8000a44 <menu_get_level+0x1c>
		}

		return i;
 8000a58:	7afb      	ldrb	r3, [r7, #11]
	}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <menu_next>:

	void menu_next(void) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0

		if (currentPointer->next)
 8000a68:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <menu_next+0x74>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d018      	beq.n	8000aa4 <menu_next+0x40>
		{

			currentPointer = (*currentPointer).next;
 8000a72:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <menu_next+0x74>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	4a17      	ldr	r2, [pc, #92]	; (8000ad8 <menu_next+0x74>)
 8000a7a:	6013      	str	r3, [r2, #0]
			menu_index++;
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <menu_next+0x78>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	3301      	adds	r3, #1
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <menu_next+0x78>)
 8000a86:	701a      	strb	r2, [r3, #0]
			if (++lcd_row_pos > LCD_ROWS - 1) lcd_row_pos = LCD_ROWS - 1;
 8000a88:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <menu_next+0x7c>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <menu_next+0x7c>)
 8000a92:	701a      	strb	r2, [r3, #0]
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <menu_next+0x7c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b05      	cmp	r3, #5
 8000a9a:	d918      	bls.n	8000ace <menu_next+0x6a>
 8000a9c:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <menu_next+0x7c>)
 8000a9e:	2205      	movs	r2, #5
 8000aa0:	701a      	strb	r2, [r3, #0]
 8000aa2:	e014      	b.n	8000ace <menu_next+0x6a>
		}
		else
		{
			menu_index = 0;
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <menu_next+0x78>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
			lcd_row_pos = 0;
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <menu_next+0x7c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]

			if (currentPointer->parent) currentPointer = (currentPointer->parent)->child;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <menu_next+0x74>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	691b      	ldr	r3, [r3, #16]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d006      	beq.n	8000ac8 <menu_next+0x64>
 8000aba:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <menu_next+0x74>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	691b      	ldr	r3, [r3, #16]
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <menu_next+0x74>)
 8000ac4:	6013      	str	r3, [r2, #0]
 8000ac6:	e002      	b.n	8000ace <menu_next+0x6a>
			else currentPointer = &menu1;
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <menu_next+0x74>)
 8000aca:	4a06      	ldr	r2, [pc, #24]	; (8000ae4 <menu_next+0x80>)
 8000acc:	601a      	str	r2, [r3, #0]
		}

		menu_refresh();
 8000ace:	f7ff ff0f 	bl	80008f0 <menu_refresh>

	}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000198 	.word	0x20000198
 8000adc:	200001ba 	.word	0x200001ba
 8000ae0:	200001bb 	.word	0x200001bb
 8000ae4:	20000000 	.word	0x20000000

08000ae8 <menu_prev>:

	void menu_prev(void) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0

		currentPointer = currentPointer->prev;
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <menu_prev+0x6c>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	4a18      	ldr	r2, [pc, #96]	; (8000b54 <menu_prev+0x6c>)
 8000af4:	6013      	str	r3, [r2, #0]

		if (menu_index)
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <menu_prev+0x70>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d010      	beq.n	8000b20 <menu_prev+0x38>
		{
			menu_index--;
 8000afe:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <menu_prev+0x70>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <menu_prev+0x70>)
 8000b08:	701a      	strb	r2, [r3, #0]
			if (lcd_row_pos > 0) lcd_row_pos--;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <menu_prev+0x74>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d01b      	beq.n	8000b4a <menu_prev+0x62>
 8000b12:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <menu_prev+0x74>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <menu_prev+0x74>)
 8000b1c:	701a      	strb	r2, [r3, #0]
 8000b1e:	e014      	b.n	8000b4a <menu_prev+0x62>
		}
		else
		{
			menu_index = menu_get_index(currentPointer);
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <menu_prev+0x6c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff5b 	bl	80009e0 <menu_get_index>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <menu_prev+0x70>)
 8000b30:	701a      	strb	r2, [r3, #0]

			if (menu_index >= LCD_ROWS - 1) lcd_row_pos = LCD_ROWS - 1;
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <menu_prev+0x70>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	d903      	bls.n	8000b42 <menu_prev+0x5a>
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <menu_prev+0x74>)
 8000b3c:	2205      	movs	r2, #5
 8000b3e:	701a      	strb	r2, [r3, #0]
 8000b40:	e003      	b.n	8000b4a <menu_prev+0x62>
			else lcd_row_pos = menu_index;
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <menu_prev+0x70>)
 8000b44:	781a      	ldrb	r2, [r3, #0]
 8000b46:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <menu_prev+0x74>)
 8000b48:	701a      	strb	r2, [r3, #0]
		}

		menu_refresh();
 8000b4a:	f7ff fed1 	bl	80008f0 <menu_refresh>
	}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000198 	.word	0x20000198
 8000b58:	200001ba 	.word	0x200001ba
 8000b5c:	200001bb 	.word	0x200001bb

08000b60 <menu_enter>:

	void menu_enter(void) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0

		if (currentPointer->menu_function) currentPointer->menu_function() ;
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <menu_enter+0x68>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	695b      	ldr	r3, [r3, #20]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d003      	beq.n	8000b76 <menu_enter+0x16>
 8000b6e:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <menu_enter+0x68>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	695b      	ldr	r3, [r3, #20]
 8000b74:	4798      	blx	r3

		if (currentPointer->child)
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <menu_enter+0x68>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d021      	beq.n	8000bc4 <menu_enter+0x64>
		{

			switch (menu_get_level(currentPointer)) {
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <menu_enter+0x68>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff4f 	bl	8000a28 <menu_get_level>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d002      	beq.n	8000b96 <menu_enter+0x36>
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d005      	beq.n	8000ba0 <menu_enter+0x40>
 8000b94:	e009      	b.n	8000baa <menu_enter+0x4a>
				case 0:
					lcd_row_pos_level_1 = lcd_row_pos;
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <menu_enter+0x6c>)
 8000b98:	781a      	ldrb	r2, [r3, #0]
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <menu_enter+0x70>)
 8000b9c:	701a      	strb	r2, [r3, #0]
					break;
 8000b9e:	e004      	b.n	8000baa <menu_enter+0x4a>

				case 1:
					lcd_row_pos_level_2 = lcd_row_pos;
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <menu_enter+0x6c>)
 8000ba2:	781a      	ldrb	r2, [r3, #0]
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <menu_enter+0x74>)
 8000ba6:	701a      	strb	r2, [r3, #0]
					break;
 8000ba8:	bf00      	nop
			}

			// switch...case can be replaced by:
			// lcd_row_pos_level[ menu_get_level(currentPointer) ] = lcd_row_pos;

			menu_index = 0;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <menu_enter+0x78>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
			lcd_row_pos = 0;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <menu_enter+0x6c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]

			currentPointer = currentPointer->child;
 8000bb6:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <menu_enter+0x68>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	4a02      	ldr	r2, [pc, #8]	; (8000bc8 <menu_enter+0x68>)
 8000bbe:	6013      	str	r3, [r2, #0]

			menu_refresh();
 8000bc0:	f7ff fe96 	bl	80008f0 <menu_refresh>
		}
	}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000198 	.word	0x20000198
 8000bcc:	200001bb 	.word	0x200001bb
 8000bd0:	200001b8 	.word	0x200001b8
 8000bd4:	200001b9 	.word	0x200001b9
 8000bd8:	200001ba 	.word	0x200001ba

08000bdc <menu_back>:

	void menu_back(void) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0

		if (currentPointer->parent) {
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <menu_back+0x5c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	691b      	ldr	r3, [r3, #16]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d024      	beq.n	8000c34 <menu_back+0x58>

			switch (menu_get_level(currentPointer)) {
 8000bea:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <menu_back+0x5c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ff1a 	bl	8000a28 <menu_get_level>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d002      	beq.n	8000c00 <menu_back+0x24>
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d005      	beq.n	8000c0a <menu_back+0x2e>
 8000bfe:	e009      	b.n	8000c14 <menu_back+0x38>
				case 1:
					lcd_row_pos = lcd_row_pos_level_1;
 8000c00:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <menu_back+0x60>)
 8000c02:	781a      	ldrb	r2, [r3, #0]
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <menu_back+0x64>)
 8000c06:	701a      	strb	r2, [r3, #0]
					break;
 8000c08:	e004      	b.n	8000c14 <menu_back+0x38>

				case 2:
					lcd_row_pos = lcd_row_pos_level_2;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <menu_back+0x68>)
 8000c0c:	781a      	ldrb	r2, [r3, #0]
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <menu_back+0x64>)
 8000c10:	701a      	strb	r2, [r3, #0]
					break;
 8000c12:	bf00      	nop

				}

			currentPointer = currentPointer->parent;
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <menu_back+0x5c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	691b      	ldr	r3, [r3, #16]
 8000c1a:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <menu_back+0x5c>)
 8000c1c:	6013      	str	r3, [r2, #0]
			menu_index = menu_get_index(currentPointer);
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <menu_back+0x5c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fedc 	bl	80009e0 <menu_get_index>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <menu_back+0x6c>)
 8000c2e:	701a      	strb	r2, [r3, #0]

			menu_refresh();
 8000c30:	f7ff fe5e 	bl	80008f0 <menu_refresh>

		}
	}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000198 	.word	0x20000198
 8000c3c:	200001b8 	.word	0x200001b8
 8000c40:	200001bb 	.word	0x200001bb
 8000c44:	200001b9 	.word	0x200001b9
 8000c48:	200001ba 	.word	0x200001ba

08000c4c <rmf_fm_func>:
const uint8_t glosnosc_86[3] = {0x05, 0x90, 0x8D};


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void rmf_fm_func(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
i2c_transfer(0x22, rmf_fm, 3);
 8000c50:	2203      	movs	r2, #3
 8000c52:	4903      	ldr	r1, [pc, #12]	; (8000c60 <rmf_fm_func+0x14>)
 8000c54:	2022      	movs	r0, #34	; 0x22
 8000c56:	f7ff fddd 	bl	8000814 <i2c_transfer>
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	08001a98 	.word	0x08001a98

08000c64 <radio_krakow_func>:

void radio_krakow_func(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
i2c_transfer(0x22, radio_krakow, 3);
 8000c68:	2203      	movs	r2, #3
 8000c6a:	4903      	ldr	r1, [pc, #12]	; (8000c78 <radio_krakow_func+0x14>)
 8000c6c:	2022      	movs	r0, #34	; 0x22
 8000c6e:	f7ff fdd1 	bl	8000814 <i2c_transfer>
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	08001a9c 	.word	0x08001a9c

08000c7c <radio_zet_func>:

void radio_zet_func(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
i2c_transfer(0x22, radio_zet, 3);
 8000c80:	2203      	movs	r2, #3
 8000c82:	4903      	ldr	r1, [pc, #12]	; (8000c90 <radio_zet_func+0x14>)
 8000c84:	2022      	movs	r0, #34	; 0x22
 8000c86:	f7ff fdc5 	bl	8000814 <i2c_transfer>
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	08001aa0 	.word	0x08001aa0

08000c94 <radio_plus_func>:

void radio_plus_func(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
i2c_transfer(0x22, radio_plus, 3);
 8000c98:	2203      	movs	r2, #3
 8000c9a:	4903      	ldr	r1, [pc, #12]	; (8000ca8 <radio_plus_func+0x14>)
 8000c9c:	2022      	movs	r0, #34	; 0x22
 8000c9e:	f7ff fdb9 	bl	8000814 <i2c_transfer>
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	08001aa4 	.word	0x08001aa4

08000cac <radio_program1_func>:

void radio_program1_func(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
i2c_transfer(0x22, radio_program1, 3);
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	4903      	ldr	r1, [pc, #12]	; (8000cc0 <radio_program1_func+0x14>)
 8000cb4:	2022      	movs	r0, #34	; 0x22
 8000cb6:	f7ff fdad 	bl	8000814 <i2c_transfer>
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	08001aa8 	.word	0x08001aa8

08000cc4 <radio_program3_func>:

void radio_program3_func(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
i2c_transfer(0x22, radio_program3, 3);
 8000cc8:	2203      	movs	r2, #3
 8000cca:	4903      	ldr	r1, [pc, #12]	; (8000cd8 <radio_program3_func+0x14>)
 8000ccc:	2022      	movs	r0, #34	; 0x22
 8000cce:	f7ff fda1 	bl	8000814 <i2c_transfer>
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	08001aac 	.word	0x08001aac

08000cdc <glosnosc_6_func>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glosnosc_6_func(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
i2c_transfer(0x22, glosnosc_6, 3);
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	4903      	ldr	r1, [pc, #12]	; (8000cf0 <glosnosc_6_func+0x14>)
 8000ce4:	2022      	movs	r0, #34	; 0x22
 8000ce6:	f7ff fd95 	bl	8000814 <i2c_transfer>
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	08001ab0 	.word	0x08001ab0

08000cf4 <glosnosc_20_func>:

void glosnosc_20_func(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
i2c_transfer(0x22, glosnosc_20, 3);
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	4903      	ldr	r1, [pc, #12]	; (8000d08 <glosnosc_20_func+0x14>)
 8000cfc:	2022      	movs	r0, #34	; 0x22
 8000cfe:	f7ff fd89 	bl	8000814 <i2c_transfer>
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	08001ab4 	.word	0x08001ab4

08000d0c <glosnosc_30_func>:

void glosnosc_30_func(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
i2c_transfer(0x22, glosnosc_30, 3);
 8000d10:	2203      	movs	r2, #3
 8000d12:	4903      	ldr	r1, [pc, #12]	; (8000d20 <glosnosc_30_func+0x14>)
 8000d14:	2022      	movs	r0, #34	; 0x22
 8000d16:	f7ff fd7d 	bl	8000814 <i2c_transfer>
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	08001ab8 	.word	0x08001ab8

08000d24 <glosnosc_50_func>:

void glosnosc_50_func(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
i2c_transfer(0x22, glosnosc_50, 3);
 8000d28:	2203      	movs	r2, #3
 8000d2a:	4903      	ldr	r1, [pc, #12]	; (8000d38 <glosnosc_50_func+0x14>)
 8000d2c:	2022      	movs	r0, #34	; 0x22
 8000d2e:	f7ff fd71 	bl	8000814 <i2c_transfer>
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	08001abc 	.word	0x08001abc

08000d3c <glosnosc_60_func>:

void glosnosc_60_func(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
i2c_transfer(0x22, glosnosc_60, 3);
 8000d40:	2203      	movs	r2, #3
 8000d42:	4903      	ldr	r1, [pc, #12]	; (8000d50 <glosnosc_60_func+0x14>)
 8000d44:	2022      	movs	r0, #34	; 0x22
 8000d46:	f7ff fd65 	bl	8000814 <i2c_transfer>
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	08001ac0 	.word	0x08001ac0

08000d54 <glosnosc_73_func>:

void glosnosc_73_func(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
i2c_transfer(0x22, glosnosc_73, 3);
 8000d58:	2203      	movs	r2, #3
 8000d5a:	4903      	ldr	r1, [pc, #12]	; (8000d68 <glosnosc_73_func+0x14>)
 8000d5c:	2022      	movs	r0, #34	; 0x22
 8000d5e:	f7ff fd59 	bl	8000814 <i2c_transfer>
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	08001ac4 	.word	0x08001ac4

08000d6c <glosnosc_86_func>:

void glosnosc_86_func(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
i2c_transfer(0x22, glosnosc_86, 3);
 8000d70:	2203      	movs	r2, #3
 8000d72:	4903      	ldr	r1, [pc, #12]	; (8000d80 <glosnosc_86_func+0x14>)
 8000d74:	2022      	movs	r0, #34	; 0x22
 8000d76:	f7ff fd4d 	bl	8000814 <i2c_transfer>
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	08001ac8 	.word	0x08001ac8

08000d84 <wylacz_func>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void wylacz_func(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
i2c_transfer(0x22, konfiguracja_off, 3);
 8000d88:	2203      	movs	r2, #3
 8000d8a:	4903      	ldr	r1, [pc, #12]	; (8000d98 <wylacz_func+0x14>)
 8000d8c:	2022      	movs	r0, #34	; 0x22
 8000d8e:	f7ff fd41 	bl	8000814 <i2c_transfer>
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	08001a94 	.word	0x08001a94

08000d9c <wlacz_func>:

void wlacz_func(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
i2c_transfer(0x22, konfiguracja_on, 3);
 8000da0:	2203      	movs	r2, #3
 8000da2:	4903      	ldr	r1, [pc, #12]	; (8000db0 <wlacz_func+0x14>)
 8000da4:	2022      	movs	r0, #34	; 0x22
 8000da6:	f7ff fd35 	bl	8000814 <i2c_transfer>
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	08001a90 	.word	0x08001a90

08000db4 <spi_init>:
#include "gpio_f1.h"

#include "spi.h"

void spi_init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_SPI1EN;
 8000db8:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <spi_init+0x60>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4a15      	ldr	r2, [pc, #84]	; (8000e14 <spi_init+0x60>)
 8000dbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	6193      	str	r3, [r2, #24]

	gpio_pin_cfg(GPIOA, PA0, gpio_mode_output_PP_10MHz); /* GPIO -> CS (Chip Select)  SS (Slave Select). low state activates listening in the device to which data is to be transferred.*/
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2101      	movs	r1, #1
 8000dcc:	4812      	ldr	r0, [pc, #72]	; (8000e18 <spi_init+0x64>)
 8000dce:	f7ff fcb3 	bl	8000738 <gpio_pin_cfg>
	gpio_pin_cfg(GPIOA, PA1, gpio_mode_output_PP_10MHz); /* GPIO -> D/C (Data/Command) - low status on this line causes that the received data are read as commands to the controller. Otherwise, as regular data.*/
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2102      	movs	r1, #2
 8000dd6:	4810      	ldr	r0, [pc, #64]	; (8000e18 <spi_init+0x64>)
 8000dd8:	f7ff fcae 	bl	8000738 <gpio_pin_cfg>
	gpio_pin_cfg(GPIOA, PA2, gpio_mode_output_PP_10MHz); /* GPIO -> RES (Reset) - sa low state on this line resets the display.*/
 8000ddc:	2201      	movs	r2, #1
 8000dde:	2104      	movs	r1, #4
 8000de0:	480d      	ldr	r0, [pc, #52]	; (8000e18 <spi_init+0x64>)
 8000de2:	f7ff fca9 	bl	8000738 <gpio_pin_cfg>
	gpio_pin_cfg(GPIOA, PA5, gpio_mode_alternate_PP_10MHz); /* SCK CLK (Clock)  */
 8000de6:	2209      	movs	r2, #9
 8000de8:	2120      	movs	r1, #32
 8000dea:	480b      	ldr	r0, [pc, #44]	; (8000e18 <spi_init+0x64>)
 8000dec:	f7ff fca4 	bl	8000738 <gpio_pin_cfg>
	gpio_pin_cfg(GPIOA, PA6, gpio_mode_input_pull); /* MISO */
 8000df0:	2208      	movs	r2, #8
 8000df2:	2140      	movs	r1, #64	; 0x40
 8000df4:	4808      	ldr	r0, [pc, #32]	; (8000e18 <spi_init+0x64>)
 8000df6:	f7ff fc9f 	bl	8000738 <gpio_pin_cfg>
	gpio_pin_cfg(GPIOA, PA7, gpio_mode_alternate_PP_10MHz); /* MOSI DIN (Data In/Device In) - i*/
 8000dfa:	2209      	movs	r2, #9
 8000dfc:	2180      	movs	r1, #128	; 0x80
 8000dfe:	4806      	ldr	r0, [pc, #24]	; (8000e18 <spi_init+0x64>)
 8000e00:	f7ff fc9a 	bl	8000738 <gpio_pin_cfg>

	SPI1->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_SPE | SPI_CR1_MSTR;
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <spi_init+0x68>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <spi_init+0x68>)
 8000e0a:	f443 7351 	orr.w	r3, r3, #836	; 0x344
 8000e0e:	6013      	str	r3, [r2, #0]

}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40010800 	.word	0x40010800
 8000e1c:	40013000 	.word	0x40013000

08000e20 <spi_rw>:



uint16_t spi_rw(uint16_t data)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	80fb      	strh	r3, [r7, #6]
//Transmit buffer empty
while( !(SPI1->SR & SPI_SR_TXE) );
 8000e2a:	bf00      	nop
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <spi_rw+0x40>)
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d0f9      	beq.n	8000e2c <spi_rw+0xc>
SPI1->DR = data;
 8000e38:	4a09      	ldr	r2, [pc, #36]	; (8000e60 <spi_rw+0x40>)
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	60d3      	str	r3, [r2, #12]
//Receive buffer not empty
while( !(SPI1->SR & SPI_SR_RXNE) );
 8000e3e:	bf00      	nop
 8000e40:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <spi_rw+0x40>)
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d0f9      	beq.n	8000e40 <spi_rw+0x20>
data = SPI1->DR;
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <spi_rw+0x40>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	80fb      	strh	r3, [r7, #6]
return data;
 8000e52:	88fb      	ldrh	r3, [r7, #6]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40013000 	.word	0x40013000

08000e64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <SystemInit+0x5c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a14      	ldr	r2, [pc, #80]	; (8000ec0 <SystemInit+0x5c>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <SystemInit+0x5c>)
 8000e76:	685a      	ldr	r2, [r3, #4]
 8000e78:	4911      	ldr	r1, [pc, #68]	; (8000ec0 <SystemInit+0x5c>)
 8000e7a:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <SystemInit+0x60>)
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <SystemInit+0x5c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0e      	ldr	r2, [pc, #56]	; (8000ec0 <SystemInit+0x5c>)
 8000e86:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e8e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <SystemInit+0x5c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <SystemInit+0x5c>)
 8000e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e9a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <SystemInit+0x5c>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <SystemInit+0x5c>)
 8000ea2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000ea6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <SystemInit+0x5c>)
 8000eaa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000eae:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <SystemInit+0x64>)
 8000eb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eb6:	609a      	str	r2, [r3, #8]
#endif 
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	f8ff0000 	.word	0xf8ff0000
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ecc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ece:	e003      	b.n	8000ed8 <LoopCopyDataInit>

08000ed0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ed2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ed4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ed6:	3104      	adds	r1, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ed8:	480a      	ldr	r0, [pc, #40]	; (8000f04 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000edc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ede:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ee0:	d3f6      	bcc.n	8000ed0 <CopyDataInit>
  ldr r2, =_sbss
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ee4:	e002      	b.n	8000eec <LoopFillZerobss>

08000ee6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ee8:	f842 3b04 	str.w	r3, [r2], #4

08000eec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000eee:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ef0:	d3f9      	bcc.n	8000ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ef2:	f7ff ffb7 	bl	8000e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f000 f80f 	bl	8000f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000efa:	f7ff fceb 	bl	80008d4 <main>
  bx lr
 8000efe:	4770      	bx	lr
  ldr r3, =_sidata
 8000f00:	08001ad4 	.word	0x08001ad4
  ldr r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f08:	2000019c 	.word	0x2000019c
  ldr r2, =_sbss
 8000f0c:	2000019c 	.word	0x2000019c
  ldr r3, = _ebss
 8000f10:	200001bc 	.word	0x200001bc

08000f14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC1_2_IRQHandler>
	...

08000f18 <__libc_init_array>:
 8000f18:	b570      	push	{r4, r5, r6, lr}
 8000f1a:	2500      	movs	r5, #0
 8000f1c:	4e0c      	ldr	r6, [pc, #48]	; (8000f50 <__libc_init_array+0x38>)
 8000f1e:	4c0d      	ldr	r4, [pc, #52]	; (8000f54 <__libc_init_array+0x3c>)
 8000f20:	1ba4      	subs	r4, r4, r6
 8000f22:	10a4      	asrs	r4, r4, #2
 8000f24:	42a5      	cmp	r5, r4
 8000f26:	d109      	bne.n	8000f3c <__libc_init_array+0x24>
 8000f28:	f000 f81a 	bl	8000f60 <_init>
 8000f2c:	2500      	movs	r5, #0
 8000f2e:	4e0a      	ldr	r6, [pc, #40]	; (8000f58 <__libc_init_array+0x40>)
 8000f30:	4c0a      	ldr	r4, [pc, #40]	; (8000f5c <__libc_init_array+0x44>)
 8000f32:	1ba4      	subs	r4, r4, r6
 8000f34:	10a4      	asrs	r4, r4, #2
 8000f36:	42a5      	cmp	r5, r4
 8000f38:	d105      	bne.n	8000f46 <__libc_init_array+0x2e>
 8000f3a:	bd70      	pop	{r4, r5, r6, pc}
 8000f3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f40:	4798      	blx	r3
 8000f42:	3501      	adds	r5, #1
 8000f44:	e7ee      	b.n	8000f24 <__libc_init_array+0xc>
 8000f46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f4a:	4798      	blx	r3
 8000f4c:	3501      	adds	r5, #1
 8000f4e:	e7f2      	b.n	8000f36 <__libc_init_array+0x1e>
 8000f50:	08001acc 	.word	0x08001acc
 8000f54:	08001acc 	.word	0x08001acc
 8000f58:	08001acc 	.word	0x08001acc
 8000f5c:	08001ad0 	.word	0x08001ad0

08000f60 <_init>:
 8000f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f62:	bf00      	nop
 8000f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f66:	bc08      	pop	{r3}
 8000f68:	469e      	mov	lr, r3
 8000f6a:	4770      	bx	lr

08000f6c <_fini>:
 8000f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f6e:	bf00      	nop
 8000f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f72:	bc08      	pop	{r3}
 8000f74:	469e      	mov	lr, r3
 8000f76:	4770      	bx	lr
